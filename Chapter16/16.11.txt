template <typename elemType> class ListItem;

template <typename elemType> class List {
public:
	List<elemType>();
	List<elemType>(const List<elemType> &);
	List<elemType>& operator=(const List<elemType> &);
	~List();
	void insert(ListItem *ptr, elemType value);
private:
	ListItem *front, *end;
};

// ListItem needs a template argument, as a class template is not a type
// (inside the class scope we MAY use the name of the template without arguments, as it adds readability)

fix:

template <typename elemType> class ListItem;
template <typename elemType> class List {
public:
	List();
	List(const List &);
	List &operator=(const List &);
	~List();
	void insert(ListItem<elemType> *ptr, elemType value);
private:
	ListItem<elemType> *front, *end;
};
