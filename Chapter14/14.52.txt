class SmallInt {
	friend SmallInt operator+(const SmallInt&, const SmallInt&);
public:
	SmallInt(int = 0);
	operator int() const { return val; }
private:
	std::size_t val;
};

struct LongDouble {
	LongDouble(double = 0.0);
	operator double();
	operator float();
	
	LongDouble operator+(const SmallInt&);
};
LongDouble operator+(LongDouble&, double);

SmallInt si;
LongDouble ld;

ld = si + ld;
// candidate functions: SmallInt operator+(const SmallInt&, const SmallInt&) , 
						LongDouble operator+(LongDouble&, double)
// no viable function: call is ambiguous: the first function's first parameter is an exact match, however the second
//	requires a conversion: LongDouble to double or float, then a built-in conversion to int, then a conversion to SmallInt
// the second function's first parameter requires a conversion from SmallInt to LongDouble: SmallInt to int using an user-defined
//	conversion, then that int to double, then that double to LongDouble; the second parameter requires an user-defined conversion from
//	LongDouble to double

ld = ld + si;

// candidate functions:	SmallInt operator+(const SmallInt&, const SmallInt&) ,
						LongDouble operator+(const SmallInt) ,
						LongDouble operator+(LongDouble&, double);
// best viable function: 	the memberfunction (second), it is an exact match for both parameters
